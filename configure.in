dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(vifm, 0.7.3a)
AM_CONFIG_HEADER(config.h)


AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AM_PROG_LIBTOOL
AM_PROG_CC_C_O
AC_CONFIG_MACRO_DIR([m4])
AC_CHECK_HEADER([limits.h], [], [AC_MSG_ERROR([limits.h header not found.])])
AC_CHECK_HEADER([sys/time.h], [], [AC_MSG_ERROR([sys/time.h header not found.])])
AC_CHECK_HEADER([unistd.h], [], [AC_MSG_ERROR([unistd.h header not found.])])
AC_CHECK_HEADER([wchar.h], [], [AC_MSG_ERROR([wchar.h header not found.])])
AC_CHECK_FUNC([getcwd], [], [AC_MSG_ERROR([getcwd() function not found.])])
AC_CHECK_FUNC([mkdir], [], [AC_MSG_ERROR([mkdir() function not found.])])
AC_CHECK_FUNC([regcomp], [], [AC_MSG_ERROR([regcomp() function not found.])])
AC_CHECK_FUNC([strdup], [], [AC_MSG_ERROR([strdup() function not found.])])
AC_CHECK_FUNC([strstr], [], [AC_MSG_ERROR([strstr() function not found.])])

dnl Check for regex.h header, its functions, types and macros.
AC_CHECK_HEADER([regex.h], [], [AC_MSG_ERROR([regex.h header not found.])])
AC_CHECK_FUNC([regcomp], [], [AC_MSG_ERROR([regcomp() function not found.])])
AC_CHECK_FUNC([regerror], [], [AC_MSG_ERROR([regerror() function not found.])])
AC_CHECK_FUNC([regexec], [], [AC_MSG_ERROR([regexec() function not found.])])
AC_CHECK_FUNC([regfree], [], [AC_MSG_ERROR([regfree() function not found.])])
AC_CHECK_TYPE([regex_t], [], [AC_MSG_ERROR([regex_t type not found in regex.h])], [[#include <regex.h>]])
AC_CHECK_DECL([REG_EXTENDED], [], [AC_MSG_ERROR([REG_EXTENDED not found in regex.h])], [[#include <regex.h>]])
AC_CHECK_DECL([REG_ICASE], [], [AC_MSG_ERROR([REG_ICASE not found in regex.h])], [[#include <regex.h>]])
AC_CHECK_DECL([REG_NOMATCH], [], [AC_MSG_ERROR([REG_NOMATCH not found in regex.h])], [[#include <regex.h>]])

dnl Check for socket related headers and functions.
AC_CHECK_HEADER([arpa/inet.h], [], [AC_MSG_ERROR([arpa/inet.h header not found.])])
AC_CHECK_HEADER([netinet/in.h], [], [AC_MSG_ERROR([netinet/in.h header not found.])])
AC_CHECK_HEADER([sys/socket.h], [], [AC_MSG_ERROR([sys/socket.h header not found.])])
AC_CHECK_HEADER([sys/un.h], [], [AC_MSG_ERROR([sys/un.h header not found.])])
AC_CHECK_FUNC([bind], [], [AC_MSG_ERROR([bind() function not found.])])
AC_CHECK_FUNC([htons], [], [AC_MSG_ERROR([htons() function not found.])])
AC_CHECK_FUNC([inet_addr], [], [AC_MSG_ERROR([inet_addr() function not found.])])
AC_CHECK_FUNC([recv], [], [AC_MSG_ERROR([recv() function not found.])])
AC_CHECK_FUNC([sendto], [], [AC_MSG_ERROR([sendto() function not found.])])
AC_CHECK_FUNC([setsockopt], [], [AC_MSG_ERROR([setsockopt() function not found.])])
AC_CHECK_FUNC([socket], [], [AC_MSG_ERROR([socket() function not found.])])

AC_CHECK_MEMBERS([struct stat.st_mtim])
AC_SYS_LARGEFILE
AC_FUNC_FSEEKO
AC_TYPE_OFF_T

AC_CHECK_PROG(HAVE_FILE_PROG, file, 1)
if test "x${HAVE_FILE_PROG}" = 'x1' ; then
    AC_DEFINE_UNQUOTED(HAVE_FILE_PROG, 1, [Define if file program present])
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}")
  fi
else
  if test "x${datadir}" = 'x${datarootdir}'; then
    if test "x${datarootdir}" = 'x${prefix}/share'; then
      if test "x${prefix}" = "xNONE"; then
        AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}")
      else
        AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}")
      fi
    fi
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}")
  fi
fi

dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

dnl This is for Mac OS
if test "x$(uname)" = "xDarwin"; then
  CFLAGS="$CFLAGS -D_DARWIN_C_SOURCE"
fi

dnl Use 64-bit off_t type
CFLAGS="$CFLAGS -D_FILE_OFFSET_BITS=64"

dnl Use pthread library
AC_CHECK_LIB(pthread, pthread_create,
	[LIBS="$LIBS -lpthread"
	AC_CHECK_HEADER([pthread.h], [], [AC_MSG_ERROR([pthread.h header not found.])])
	],
	[AC_MSG_ERROR([libpthread not found])])

dnl Check for all required elements in pthread.h.
AC_CHECK_FUNC([pthread_create], [], [AC_MSG_ERROR([pthread_create() function not found.])])
AC_CHECK_FUNC([pthread_getspecific], [], [AC_MSG_ERROR([pthread_getspecific() function not found.])])
AC_CHECK_FUNC([pthread_key_create], [], [AC_MSG_ERROR([pthread_key_create() function not found.])])
AC_CHECK_FUNC([pthread_mutex_lock], [], [AC_MSG_ERROR([pthread_mutex_lock() function not found.])])
AC_CHECK_FUNC([pthread_mutex_unlock], [], [AC_MSG_ERROR([pthread_mutex_unlock() function not found.])])
AC_CHECK_FUNC([pthread_once], [], [AC_MSG_ERROR([pthread_once() function not found.])])
AC_CHECK_FUNC([pthread_setspecific], [], [AC_MSG_ERROR([pthread_setspecific() function not found.])])
AC_CHECK_TYPE([pthread_t], [], [AC_MSG_ERROR([pthread_t type not found in pthread.h])], [[#include <pthread.h>]])
AC_CHECK_TYPE([pthread_once_t], [], [AC_MSG_ERROR([pthread_once_t type not found in pthread.h])], [[#include <pthread.h>]])
AC_CHECK_TYPE([pthread_key_t], [], [AC_MSG_ERROR([pthread_key_t type not found in pthread.h])], [[#include <pthread.h>]])
AC_CHECK_TYPE([pthread_mutex_t], [], [AC_MSG_ERROR([pthread_mutex_t type not found in pthread.h])], [[#include <pthread.h>]])
AC_CHECK_DECL([PTHREAD_ONCE_INIT], [], [AC_MSG_ERROR([PTHREAD_ONCE_INIT not found in pthread.h])], [[#include <pthread.h>]])
AC_CHECK_DECL([PTHREAD_MUTEX_INITIALIZER], [], [AC_MSG_ERROR([PTHREAD_MUTEX_INITIALIZER not found in pthread.h])], [[#include <pthread.h>]])

dnl AC_CHECK_LIB(XCurses, initscr)
vifm_cv_curses=/usr
AC_ARG_WITH(curses, [  --with-curses=DIR       where ncurses is installed ],
	[if test $withval != yes; then
		vifm_cv_curses=$withval
	fi
	if test x$vifm_cv_curses != x/usr; then
		LDFLAGS="-L${abook_cv_curses}/lib $LDFLAGS"
		CPPFLAGS="$CPPFLAGS -I${vifm_cv_curses}/include"
	fi])

AC_CHECK_LIB(ncursesw, initscr,
	[LIBS="$LIBS -lncursesw"
	if test x$vifm_cv_curses = x/usr -a -d /usr/include/ncursesw; then
		CPPFLAGS="$CPPFLAGS -I/usr/include/ncursesw"
	fi
    ],
	[AC_MSG_ERROR([libncursesw not found])])
	#[ac_widec_possible=no
	#AC_CHECK_LIB(ncurses, initscr,
		#[LIBS="$LIBS -lncurses"
		#if test x$vifm_cv_curses = x/usr -a -d /usr/include/ncurses; then
			#CPPFLAGS="$CPPFLAGS -I/usr/include/ncurses"
		#fi
		#AC_CHECK_HEADER([curses.h], [], [AC_MSG_ERROR([curses.h header not found.])])],
		#[CF_CURSES_LIBS])
	#])
LIBS=$LIBS $GUI_LINK_OPTS_TERM

dnl Check for curses.h header and all its required elements.
AC_CHECK_HEADER([curses.h], [], [AC_MSG_ERROR([curses.h header not found.])])
AC_CHECK_DECL([COLORS], [], [AC_MSG_ERROR([COLORS not found in curses.h])], [[#include <curses.h>]])
AC_CHECK_DECL([COLOR_PAIR], [], [AC_MSG_ERROR([COLOR_PAIR not found in curses.h])], [[#include <curses.h>]])
AC_CHECK_DECL([TABSIZE], [], [AC_MSG_ERROR([TABSIZE not found in curses.h])], [[#include <curses.h>]])
AC_CHECK_TYPE([WINDOW], [], [AC_MSG_ERROR([WINDOW type not found in curses.h])], [[#include <curses.h>]])
AC_CHECK_FUNC([curs_set], [], [AC_MSG_ERROR([curs_set() function not found.])])
AC_CHECK_FUNC([def_prog_mode], [], [AC_MSG_ERROR([def_prog_mode() function not found.])])
AC_CHECK_FUNC([doupdate], [], [AC_MSG_ERROR([doupdate() function not found.])])
AC_CHECK_FUNC([endwin], [], [AC_MSG_ERROR([endwin() function not found.])])
AC_CHECK_FUNC([flushinp], [], [AC_MSG_ERROR([flushinp() function not found.])])
AC_CHECK_FUNC([has_colors], [], [AC_MSG_ERROR([has_colors() function not found.])])
AC_CHECK_FUNC([init_pair], [], [AC_MSG_ERROR([init_pair() function not found.])])
AC_CHECK_FUNC([initscr], [], [AC_MSG_ERROR([initscr() function not found.])])
AC_CHECK_FUNC([isendwin], [], [AC_MSG_ERROR([isendwin() function not found.])])
AC_CHECK_FUNC([keypad], [], [AC_MSG_ERROR([keypad() function not found.])])
AC_CHECK_FUNC([mvwin], [], [AC_MSG_ERROR([mvwin() function not found.])])
AC_CHECK_FUNC([mvwprintw], [], [AC_MSG_ERROR([mvwprintw() function not found.])])
AC_CHECK_FUNC([newwin], [], [AC_MSG_ERROR([newwin() function not found.])])
AC_CHECK_FUNC([noecho], [], [AC_MSG_ERROR([noecho() function not found.])])
AC_CHECK_FUNC([nonl], [], [AC_MSG_ERROR([nonl() function not found.])])
AC_CHECK_FUNC([raw], [], [AC_MSG_ERROR([raw() function not found.])])
AC_CHECK_FUNC([reset_prog_mode], [], [AC_MSG_ERROR([reset_prog_mode() function not found.])])
AC_CHECK_FUNC([resize_term], [], [AC_MSG_ERROR([resize_term() function not found.])])
AC_CHECK_FUNC([resizeterm], [], [AC_MSG_ERROR([resizeterm() function not found.])])
AC_CHECK_FUNC([scrollok], [], [AC_MSG_ERROR([scrollok() function not found.])])
AC_CHECK_FUNC([set_escdelay], [], [AC_MSG_ERROR([set_escdelay() function not found.])])
AC_CHECK_FUNC([start_color], [], [AC_MSG_ERROR([start_color() function not found.])])
AC_CHECK_FUNC([stdscr], [], [AC_MSG_ERROR([stdscr() function not found.])])
AC_CHECK_FUNC([use_default_colors], [], [AC_MSG_ERROR([use_default_colors() function not found.])])
AC_CHECK_FUNC([waddch], [], [AC_MSG_ERROR([waddch() function not found.])])
AC_CHECK_FUNC([waddnstr], [], [AC_MSG_ERROR([waddnstr() function not found.])])
AC_CHECK_FUNC([waddnwstr], [], [AC_MSG_ERROR([waddnwstr() function not found.])])
AC_CHECK_FUNC([wattr_off], [], [AC_MSG_ERROR([wattr_off() function not found.])])
AC_CHECK_FUNC([wattr_on], [], [AC_MSG_ERROR([wattr_on() function not found.])])
AC_CHECK_FUNC([wbkgdset], [], [AC_MSG_ERROR([wbkgdset() function not found.])])
AC_CHECK_FUNC([wborder], [], [AC_MSG_ERROR([wborder() function not found.])])
AC_CHECK_FUNC([wclrtoeol], [], [AC_MSG_ERROR([wclrtoeol() function not found.])])
AC_CHECK_FUNC([werase], [], [AC_MSG_ERROR([werase() function not found.])])
AC_CHECK_FUNC([wget_wch], [], [AC_MSG_ERROR([wget_wch() function not found.])])
AC_CHECK_FUNC([wgetch], [], [AC_MSG_ERROR([wgetch() function not found.])])
AC_CHECK_FUNC([wmove], [], [AC_MSG_ERROR([wmove() function not found.])])
AC_CHECK_FUNC([wnoutrefresh], [], [AC_MSG_ERROR([wnoutrefresh() function not found.])])
AC_CHECK_FUNC([wprintw], [], [AC_MSG_ERROR([wprintw() function not found.])])
AC_CHECK_FUNC([wredrawln], [], [AC_MSG_ERROR([wredrawln() function not found.])])
AC_CHECK_FUNC([wrefresh], [], [AC_MSG_ERROR([wrefresh() function not found.])])
AC_CHECK_FUNC([wresize], [], [AC_MSG_ERROR([wresize() function not found.])])
AC_CHECK_FUNC([wtimeout], [], [AC_MSG_ERROR([wtimeout() function not found.])])
AC_CHECK_FUNC([wtouchln], [], [AC_MSG_ERROR([wtouchln() function not found.])])

dnl ----------------------------------------------------------------------------
dnl check for gnu coreutils version
dnl ----------------------------------------------------------------------------

min_version="7.1"
version="$(mv --version 2> /dev/null | sed -ne 's/^.*(GNU coreutils) //p')"

major="${version%.*}"
minor="${version#*.}"
min_major="${min_version%.*}"
min_minor="${min_version#*.}"

if test "x$major" != "x" -a "x$minor" != "x" ; then
	AC_DEFINE([GNU_TOOLCHAIN], [1], [GNU toolchain is installed])
	if test $major -ge $min_major -a $minor -ge $min_minor ; then
		AC_DEFINE([SUPPORT_NO_CLOBBER], [1], [-n option is available for cp and mv])
	fi
fi

dnl ----------------------------------------------------------------------------
dnl checks for external libraries
dnl ----------------------------------------------------------------------------

AC_ARG_WITH(gtk,
	AS_HELP_STRING([--with-gtk],
		[use GTK+ to determine mimetypes if available @<:@default=yes@:>@]),
	[use_gtk=$withval],
	[use_gtk=yes])

AC_ARG_WITH(libmagic,
	AS_HELP_STRING([--with-libmagic],
		[use libmagic to determine mimetypes if available @<:@default=yes@:>@]),
	[use_libmagic=$withval],
	[use_libmagic=yes])

AC_ARG_WITH(X11,
	AS_HELP_STRING([--with-X11],
		[use libX11 to determine terminal emulator title  @<:@default=yes@:>@]),
	[use_libX11=$withval],
	[use_libX11=yes])

dnl ----------------------------------------------------------------------------
dnl checks for mimetype detection
dnl ----------------------------------------------------------------------------

if test "$use_gtk" = "yes"; then
	if test "x$(which pkg-config)" != "x"; then
		if pkg-config --exists glib-2.0 gtk+-2.0; then
			CFLAGS="$CFLAGS $(pkg-config --cflags glib-2.0 gtk+-2.0)"
			LIBS="$LIBS $(pkg-config --libs glib-2.0 gtk+-2.0)"
			AC_CHECK_HEADER([gio/gio.h], [], [AC_MSG_ERROR([gio/gio.h header not found.])], [[#include <gio/gio.h>]])
			AC_CHECK_HEADER([glib.h], [], [AC_MSG_ERROR([glib.h header not found.])], [[#include <glib.h>]])
			AC_CHECK_HEADER([gtk/gtk.h], [], [AC_MSG_ERROR([gtk/gtk.h header not found.])], [[#include <gtk/gtk.h>]])
			AC_CHECK_FUNC([gtk_init_check], [], [AC_MSG_ERROR([gtk_init_check() function not found.])])
			AC_CHECK_FUNC([g_file_info_get_content_type], [], [AC_MSG_ERROR([g_file_info_get_content_type() function not found.])])
			AC_CHECK_FUNC([g_file_new_for_path], [], [AC_MSG_ERROR([g_file_new_for_path() function not found.])])
			AC_CHECK_FUNC([g_file_query_info], [], [AC_MSG_ERROR([g_file_query_info() function not found.])])
			AC_CHECK_FUNC([g_object_unref], [], [AC_MSG_ERROR([g_object_unref() function not found.])])
			AC_DEFINE([HAVE_LIBGTK], [1], [use gtk to determine mime type])
		fi
	fi
fi

if test "$use_libmagic" = "yes"; then
	AC_CHECK_LIB(magic, magic_open)
	AC_CHECK_FUNC([magic_close], [], [AC_MSG_ERROR([magic_close() function not found.])])
	AC_CHECK_FUNC([magic_file], [], [AC_MSG_ERROR([magic_file() function not found.])])
	AC_CHECK_FUNC([magic_load], [], [AC_MSG_ERROR([magic_load() function not found.])])
	AC_CHECK_FUNC([magic_open], [], [AC_MSG_ERROR([magic_open() function not found.])])
	AC_CHECK_HEADER([magic.h], [], [AC_MSG_ERROR([magic.h header not found.])])
	AC_CHECK_DECLS([MAGIC_MIME_TYPE], [], [], [[#include <magic.h>]])
fi

dnl ----------------------------------------------------------------------------
dnl handle options
dnl ----------------------------------------------------------------------------

AC_ARG_ENABLE(extended_keys,
	AS_HELP_STRING(
		[--disable-extended-keys],
		[disable extended keys (like arrows, home etc.). Without it will be no
		 delay after pressing escape @<:@default=enabled@:>@     ]),
	[extended_keys=$enableval],
	[extended_keys=yes])

AC_ARG_ENABLE(compatibility_mode,
	AS_HELP_STRING(
		[--disable-compatibility-mode],
		[disable compatibility with previous versions of vifm (behaviour of dd
		 and <tab>) @<:@default=enabled@:>@     ]),
	[compatibility_mode=$enableval],
	[compatibility_mode=yes])

AC_ARG_ENABLE(desktop_files,
	AS_HELP_STRING(
		[--disable-desktop-files],
		[disable parsing of *.desktop files found on your system to get a list
		 of programs associated with filetypes @<:@default=enabled@:>@     ]),
	[desktop_files=$enableval],
	[desktop_files=yes])

if test "$extended_keys" = "yes"; then
	AC_DEFINE([ENABLE_EXTENDED_KEYS], [1], [enables extended keys (arrows etc.)])
fi

if test "$compatibility_mode" = "yes"; then
	AC_DEFINE([ENABLE_COMPATIBILITY_MODE], [1], [old behaviour of dd and <tab>])
fi

if test "$desktop_files" = "yes"; then
	AC_DEFINE([ENABLE_DESKTOP_FILES], [1], [parsing of .desktop files])
fi

if test "$use_libX11" = "yes"; then
	AC_CHECK_LIB(X11, XOpenDisplay,
		[LIBS="$LIBS -lX11"
		AC_CHECK_HEADER([X11/Xlib.h], [], [AC_MSG_ERROR([X11/Xlib.h header not found.])])
		AC_CHECK_HEADER([X11/Xutil.h], [], [AC_MSG_ERROR([X11/Xutil.h header not found.])])
		AC_DEFINE([HAVE_X11], [1], [use X11 to determine terminal emulator title])])
fi

AC_OUTPUT([
Makefile
src/Makefile
])

