*vifm.txt*


|Options|            Command line arguments.
|General_keys|       General keys, that work in the most of modes.
|Normal|             Normal mode keys.
|Visual|             Visual mode keys.
|Command_line|       Command line mode keys.
|Commands|           How to use and set :commands.
|set-options|        Available options.
|Mappings|           Special sequences.
|Configure|          Configuration of vifm.
|Plugin|             Using the vifm.vim plugin.
|Compatibility_mode| Its description.
|Menus_and_dialogs|  Keys for menus and dialogs.
|Reserved|           List of reserved commands.

--------------------------------------------------------------------------------
*Options*

The vifm executable will start vifm in the current directory unless it is
given a different directory on the command line.

vifm /path/to/directory/one
or
vifm /path/to/directory/one /path/to/directory/two

Paths to files are also allowed in case you want vifm to start with some
archive opened.

The only other command line arguments are:
-f - only used from the vifm.vim script.  The selected files are written
	to ~/.vifm/vimfiles and vifm exits.

--logging - log some errors to ~/.vifm/log.
--help, -h - show a brief command summary and exit vifm.
--version, -v - show the version information and exit.
--no-configs - don't read vifmrc and vifminfo.

-------------------------------------------------------------------------------
*General_keys*

Ctrl-c or Escape - cancel most operations.
Ctrl-c or Escape - clear all selected files.
Ctrl-l - clear and redraw the screen.

--------------------------------------------------------------------------------
*Normal*

Basic Movement~

The basic vi key bindings are used to move through the files and popup windows.

k is up
j is down

h is up directory
l is handle file (enter directory or run program) and is the same as Return

gg will move to the first line of the file list.

G will move to the last line in the file list.

H - move to the first file in the window.
M - move to the file in the middle of the window.
L - move to the last file in the window.

Ctrl-F or Page Down - move forward one page.
Ctrl-B or Page Up - move back one page.

Ctrl-D - jump back one half page.
Ctrl-U - jump forward one half page.

n% move to nth file of the file list (for example 25%).

Space or Tab to switch file lists.

Movement with Count~

Most movement commands also accept a count, 12j would move down 12 files.
[count]% move to percent of the file list.
[count]j move down count files.
[count]k move up count files.
[count]G or gg move to list position count.

Scrolling panes~

zt - redraw pane with file in top of list.
zz - redraw pane with file in center of list.
zb - redraw pane with file in bottom of list.
Ctrl-e - scroll pane one line down.
Ctrl-y - scroll pane one line up.

Pane manipulation~

Second character can be entered with or without Control key.

Ctrl-w h - switch to left pane.
Ctrl-w l - switch to right pane.
Ctrl-w w - switch to other pane.
Ctrl-w o - shortcut for :only
Ctrl-w s - shortcut for :split
Ctrl-w v - shortcut for :split
Ctrl-w x - exchange panes

Marks~

You can use this characters for marks [a-z][A-Z][0-9].

m[letter] will set a mark at the current cursor position.
'[letter] will move to a mark.

Searching~

/regular expression - select files matching regular expression. Forward
    search.
?regular expression - select files matching regular expression. Backward
    search.
n - previous file matching last search pattern.  Considers last search
    direction.
N - previous file matching last search pattern.  Considers last search
    direction.
Note: vifm uses extended regular expressions for / and ?.

f[character] - search forward for file with [character] as first
    character in name.  Search wraps around the end of the list.
F[character] - search backward for file with [character] as first
    character in name.  Search wraps around the end of the list.
; - find the next match of f or F.
, - find the previous match of f or F.

Filters~
                                                               *Filters*
There are two basic file filters.  One for dot files and one for file names.

The basic vim folding key-bindings are used for filters.
za - toggles the showing and hiding of dot files.
zo - show the dot files.
zf - add the selected files to the file name filter.
zm - hide the dot files.
zO - show the hidden file name files.
zM - restore all filters.
zR - remove all filters.

All directorys will show the ../ file no matter what the filter setting is
with the exception of the / directory.

Each file list has its own filter.

Filtered files are not checked in / search or :commands.

Note: vifm uses extended regular expressions.

Other Normal Mode Keys~

: - enter command line mode.

Ctrl-o - go backward through history.
Ctrl-i - go forward through history.

Ctrl-g - creates a window showing detailed information about the current
    file.

ga - calculate size of directory.
gA - like ga, but force update.

gf - find link destination (like l with 'followlinks' off, but also finds
directories).

gv - go to visual mode restoring last selection.
gs - restore last t selection, like gv for visual mode selection.

gu<selector> - make names of selected files lowercase.
guu - make name of current file lowercase.
gugu - make name of current file lowercase.

gU<selector> - make names of selected files uppercase.
gUU - make name of current file uppercase.
gUgU - make name of current file uppercase.

i - handle file (even through it's executable and RUN_EXECUTABLE is set).

cw - change word is used to rename a file.
cW - change WORD is used to change only name of file (without extension).
cl - change link target.
co - change owner of file.
cg - change group of file.
cp - change file permissions.
C - clone file.

dd - move selected file or files to ~/.vifm/Trash (if option 'trash' is set
     otherwise delete)
d<selector> - like dd.

DD and D<selector> - like dd and d<selector>, but omitting trash directory
     (even when option USE_TRASH is set).

yy, Y - yank selected files.
y<selector> - yank files.

p - will copy the yanked files to the current directory or move the files
    to the current directory if they were deleted with dd or :d[elete] or
    if the files were yanked from the Trash directory.
P - moves the last yanked files.  The advantage of using P instead of d
    followed by p is that P moves files only once.  This isn't important in
    case you're moving files in the same file system where your home
    directory is, but using P to move files on some other file system (or
    file systems, in case you want to move files from fs1 to fs2 and your
    home is on fs3) can save your time.
al - puts symbolic links with absolute paths.
rl - puts symbolic links with relative paths.

t - select or unselect (tag) a the current file

u - undo last command.
Ctrl-r - redo last command.

v, V - start visual selection of files.

ZQ - same as :quit!
ZZ - same as :quit

. - repeat last command line command (not normal mode command).

Using Count with y, d and D~

You can use count with commands like yy.

[count]yy yank (count + 1) files starting from current cursor position
downward.

Or you can use count with motions passed to y, d or D.

d[count]j delete (count + 1) files starting from current cursor position
upward.

Selectors~

y, d and Dcommands accept selectors.  You can combine them with every of
selectors below to quickly remove or yank several files.

j, k, gg, G, H, L, M, %, f, F, ;, comma and ' can be used as selectors for
several commands.
Also following selectors can be used:
 a - all files in current view
 s - selected files
 S - all files except selected

For example:
dj - delete file under cursor and one below.
d2j - delete file under cursor and two below.
y6gg - yank all files from cursor position to 6th file in the list.

--------------------------------------------------------------------------------
*Visual*

In visual mode work almost all normal mode keys, but they do not accept
selectors.

Enter - save selection and go back to normal mode.

gv - restore previous visual selection.

v - leave visual mode.

V - leave visual mode.

: - enter command line mode.  When you leave it selection will be cleared.

o - switch active selection bound.

O - switch active selection bound.

u - make names of selected files lowercase.

U - make names of selected files uppercase.

--------------------------------------------------------------------------------
*Command_line*

This keys apply to all submodes of the command line mode: command, prompt and
search.

Down, Up, Left, Right, Home, End and Delete are extended keys and they are not
available if vifm is compiled with --disable-extended-keys option

Esc, Ctrl-C - leave command line mode, cancels input.

Ctrl-M, Enter - execute command and leave command line mode.

Ctrl-I, Tab - complete command or its argument.

Shift-Tab - complete in reverse order.

Ctrl-K - remove characters from cursor position till the end of line.

Ctrl-U - remove characters from cursor position till the beginning of line.

Ctrl-H, Backspace - remove character before the cursor.

Ctrl-D, Delete - remove character under the cursor.

Ctrl-B, Left - move cursor to the left.

Ctrl-F, Right - move cursor to the right.

Ctrl-A, Home - go to line beginning.

Ctrl-E, End - go to line end

Alt-B - go to the beginning of previous word.

Alt-F - go to the end of next word.

Ctrl-W - remove characters from cursor position till the beginning of previous
    word.

Alt-D - remove characters from cursor position till the beginning of next
    word.

Ctrl-N - recall more recent command-line from history.

Ctrl-P - recall older command-line from history.

Up - recall more recent command-line from history, that begins as the
    current command-line.

Down - recall older command-line from history, that begins as the current
    command-line.

--------------------------------------------------------------------------------
*Commands*

Commands are executed with :command_name<Return>

'|' can be used to separate commands, so you can give multiple commands in one
line.  If you want to use '|' in an argument, precede it with '\'.

Commented out lines should start with the double quote symbol, which may be
preceded by whitespace characters.

Most of the commands have two forms: complete and the short one.
Example:
:noh[lsearch]
This means the complete command is nohlsearch, and the short one is noh.

:number - move to the file number.
:12 would move to the 12th file in the list.
:0 move to the top of the list.
:$ move to the bottom of the list.

:[count]command
The only builtin :[count]command are :[count]d[elete] and :[count]y[ank].
Examples:
:d3 - would delete three files starting at the current file position
    moving down.
:3d - would delete one file at the third line in the list.

See |Reserved| for a list of reserved command names.

The builtin commands are:

:[range]!program - shellout and execute program.
    :!command & will run the process in the background using vifm's means.
    Programs that write to stdout like ls will create an error message
    showing partial output of the command.
    Take note of the space before ampersand symbol, if you omit it, command
    will be run in the background using job control of shell.
    Accepts macros.
:[range]!!program - same as :! but will pause before returning.
:!! - repeat the last command.
:[range]alink[!] - creates absolute symbolic links of files in directory of
    other view.  With "!" vifm will open vi to edit filenames.
:[range]alink path - creates absolute symbolic links of files in directory
    specified with the path (absolute or relative to directory of other
    view).
:[range]alink name1 name2... - creates absolute symbolic links of files in
    directory of other view giving each next link a corresponding name from
    the argument list.
:apropos manpage - will create a menu of items returned by the apropos
    command. Selecting an item in the menu will open the corresponding
    manpage.
:apropos - repeats last :apropos command.
:cd - change to your home directory.
:cd - - go to previous directory.
:cd ~/dir - change directory to ~/dir.
:cd /curr/dir /other/dir - change directory of the current pane to /curr/dir
    and directory of the other pane to /other/dir.  When using relative paths
    vifm assumes that both of them are relative to current directory of current
    view.  Command will not fail if one of directories is invalid.
    Accepts macros.
:cd! /dir - same as :cd /dir /dir.
:c[hange] - create a menu window to alter a files properties.
:[range]clone[!] - clones files in current directory.  With "!" vifm will
    open vi to edit filenames.
:[range]clone path - clones files to directory specified with the path
    (absolute or relative to current directory).
:[range]clone name1 name2... - clones files in current directory giving each
    next clone a corresponding name from the argument list.
:colo[rscheme] - gives a menu with a list of available color schemes.  You
    can choose default color scheme here.  It will be used for view if no
    DIRECTORY in colorscheme file fits current path.  It's also used to
    set border color (except view titles) and colors in the menus and
    dialogs.
:colo[rscheme] color_scheme_name - changes default color scheme.
:comc[lear] - removes all user defined commands.
:com[mand] - gives a menu of user commands.
:com[mand] beginning - shows user defined commands that start with the
    beginning.
:com[mand] name action - sets a new user command.
    Trying to use a reserved command name will result in an error message
    Use :com[mand]! to overwrite a previously set command.
    Unlike vim user commands do not have to start with a capital letter.
    User commands are run in a shell by default.  To run a command in
    the background you must set it as a background command with & at the end
    of the commands action (:com rm rm %f &).
:com[mand] backup /pattern - will set search pattern.
:com[mand] name filter pattern - will set file name filter.
:[range]co[py][!] - copies files to directory of other view.  With "!" vifm
    will open vi to edit filenames.
:[range]co[py] path - copies files to directory specified with the path
    (absolute or relative to directory of other view).
:[range]co[py] name1 name2... - copies files to directory of other view
    giving each next file a corresponding name from the argument list.
:[range]d[elete][count] - delete selected file or files.
    See |Vifm_Ranges| for the ranges implemented.
:delc[ommand] user_command - remove user_command.
:delm[arks]! - will delete all marks.
:delm[arks] marks ... - will delete specified marks, each argument is
    treated as a set of marks.
:[range]d[elete] [reg] [count] - will delete files to the reg register.
:di[splay] - popup menu with registers content.
:di[splay] list - display the contents of the numbered and named registers
    that are mentioned in list (for example "az to display "", "a and "z
    content).
:dirs - display directory stack.
:[range]e[dit] [file...] - will load the selected or passed file or files
    into vi.  Accepts macros.
:empty - permanently remove files from the ~/.vifm/Trash directory.  It will
    also remove all operations from undolist that have no sense after :empty
    and remove all records about files in the Trash directory from all
    registers.
:exi[t] - same as :quit.
:f[ile] - popup menu of programs set for the file type of the current file.
    Add ' &' in the end of command if you want to start program in
    background.
:filet[ype] pat1,pat2,... def_program,program2,... - will associate given
    program list to each of the patterns.  Currently only * and ? are
    treated as special symbols in the pattern.
    If you need to insert comma into command just double it (",,").
:filex[type] pat1,pat2,... def_program,program2,... - same as :filetype, but
    vifm will ignore this command if it's not running in X.  In X :filextype
    is equal to :filetype.
:filev[iewer] pat1,pat2,... command - will associate given command as a
    viewer to each of the patterns.  Currently only * and ? are treated as
    special symbols in the pattern.
:filter regular_expression
:filter /regular_expression/ - will filter files matching the pattern out of
    the directory.  Use :filter to show all files.  Using second variant
    you can use | symbol without escaping.  Add '!' to invert filter.
    See |Filters|
:filter! - same as :invert.
:filter? - show current filter value.
:[range]fin[d] pattern - will show results of find command in the menu.
    Searches among selected files if any and no range given.
    Accepts macros.
:[range]fin[d] -opt... - same as :find above, but user defines all find
    arguments.  Searches among selected files if any and no range given.
:[range]fin[d] path -opt... - same as :find above, but user defines all
    find arguments.  Ignores selection and range.
:[range]fin[d] - repeats last :find command.
:[range]gr[ep][!] pattern - will show results of grep command in the menu.
    Add "!" to search lines that do not match pattern.  Searches among
    selected files if any and no range given.  Ignores binary files.
:[range]gr[ep][!] -opt... - same as :grep above, but user defines all find
    arguments, which are not escaped.  Searches among selected files if
    any.
:[range]gr[ep][!] - repeats last :grep command.  "!" of this command
    inverts "!" in repeated command.
:h[elp] - show the help file.
:h[elp] argument - is the same as using ':h argument' in vim.
:his[tory] - show directory history.
:his[tory] x
    x can be:
      d[ir]     or .  show directory history.
      i[nput]   or @  show prompt history (e.g. on one file renaming).
      s[earch]  or /  show search history and search forward on l key.
      f[search] or /  show search history and search forward on l key.
      b[search] or ?  show search history and search backward on l key.
      c[md]     or :  show command line history.
:invert - invert file name filter.
:invert? - show current filter state.
:jobs - shows menu of current backgrounded processes.
:locate filename - uses the locate command to create a menu of filenames
    Selecting a file from the menu will reload the current file list in vifm
    to show the selected file.
:locate - repeats last :locate command.
:[range]ma[rk] x /full/path [filename] - set mark x at /full/path and
    filename.  By default current directory is used.  If no filename was
    given and /full/path is current directory then last file in [range] is
    being used.  Using macros is allowed.
:marks - menu of bookmarks.
:marks list ... - display the contents of the marks that are mentioned in list.
:[range]m[ove][!] - moves files to directory of other view.  With "!" vifm
    will open vi to edit filenames.
:[range]m[ove] path - moves files to directory specified with the path
    (absolute or relative to directory of other view).
:[range]m[ove] name1 name2... - moves files to directory of other view
    giving each next file a corresponding name from the argument list.
:noh[lsearch] - clear selection in current pane.
:on[ly] - switch to a one window view.
:popd - remove pane directories from stack.
:pushd[!] /curr/dir [/other/dir] - add pane directories to stack and process
    arguments like :cd command.
:pushd - exchanges the top two items of the directory stack.
:pw[d] - show the present working directory.
:q[uit] - will exit vifm (add ! if you don't want to save changes).
:ls - shows list of screen program windows (only when screen is used).
:reg[isters] - popup menu with registers content.
:reg[isters] list - display the contents of the numbered and named
    registers that are mentioned in list (for example "az to display "",
    "a and "z content).
:[range]rename - rename files using vi to edit names.
:[range]rename name1 name2... - rename each of selected files to a
    corresponding name.
:restart - will free a lot of things (histories, commands, etc.) and reread
    vifminfo and vifmrc files.
:[range]rlink[!] - creates relative symbolic links of files in directory of
    other view.  With "!" vifm will open vi to edit filenames.
:[range]rlink path - creates relative symbolic links of files in directory
    specified with the path (absolute or relative to directory of other
    view).
:[range]rlink name1 name2... - creates relative symbolic links of files in
    directory of other view giving each next link a corresponding name from
    the argument list.
:screen - toggles whether to use the screen program or not.
    The default configuration has the screen option turned off.  The screen
    program uses pseudo terminals to allow multiple windows to be used in
    the console or in a single xterm.  Starting vifm from screen with the
    screen option turned on will cause vifm to open a new screen window for
    each new file edited or program launched from vifm.
    This requires screen version 3.9.9 or newer for the screen -X argument.
:screen? - shows whether screen program is used.
:se[t] opt1=val1 opt2='val2' opt3="val3" ... - sets given options.
    You can use following syntax:
     - for all options - option? and option&
     - for boolean options - option, nooption, invoption and option!
     - for integer options - option=x, option+=x and option-=x
     - for string options - option=x
     - for string list options - option=x, option+=x and option-=x
     - for enumeration options - option=x, option+=x and option-=x
     - for enumeration options - option=x
     - for set options - option=x, option+=x and option-=x
    the meaning:
     - option - turn option on
     - nooption - turn option off
     - invoption - invert option state
     - option! - invert option state
     - option? - print option value
     - option& - reset option to its default value
     - option=x - set option to x
     - option+=x - add x to option
     - option-=x - remove (or subtract) x from option
:sh[ell] - will start a shell.
:sor[t] - menu of different sorting methods.
:sp[lit] - switch to a two window view.
:sp[lit] path - splits the window to show both file directories.  And
    changes other pane to path.
:[range]s[ubstitite]/pattern/string/[flags] - for each file in range
    replace a match of pattern with string.  String can contain \0...\9
    to link to capture groups (0 - all match, 1 - first group, etc.).
    Flags can be used
        i - ignore case (the 'ignorecase' and 'smartcase' options are not
            used)
        I - don't ignore case (the 'ignorecase' and 'smartcase' options
            are not used)
        g - substitute all matches in each file name
:[range]tr/pattern/string/ - for each file in range transliterate the
    characters which appear in pattern to the corresponding character in
    string.  When string is shorter than pattern, it's padded with its
    last character.
:sync - change the other panel to the current panels directory.
:undol[ist] - show list of latest changes.  Add ! to see commands.
:vie[w] - toggle on and off the quick file view.
:w[rite] - will write vifminfo (add ! to force write even if settings
    weren't changed).
:wq - same as :quit.
:x[it] - exit vifm (add ! if you don't want to save changes).
:[range]y[ank] [reg] [count] - will yank files to the reg register.

:map lhs rhs - map lhs key sequence to rhs in normal and visual modes.
:map! lhs rhs - map lhs key sequence to rhs in command line mode.

:cm[ap] lhs rhs - map lhs to rhs in command line mode.
:nm[ap] lhs rhs - map lhs to rhs in normal mode.
:vm[ap] lhs rhs - map lhs to rhs in visual mode.

:no[remap] lhs rhs - map the key sequence lhs to {rhs} for normal and
    visual modes, but disallow mapping of rhs.
:no[remap]! lhs rhs - map the key sequence lhs to {rhs} for command line
    mode, but disallow mapping of rhs.

:cno[remap] lhs rhs - map the key sequence lhs to {rhs} for command line
    mode, but disallow mapping of rhs.
:nn[oremap] lhs rhs - map the key sequence lhs to {rhs} for normal mode,
    but disallow mapping of rhs.
:vn[oremap] lhs rhs - map the key sequence lhs to {rhs} for visual mode,
    but disallow mapping of rhs.

:unm[ap] lhs - remove the mapping of lhs from normal and visual modes.
:unm[ap]! lhs - remove the mapping of lhs from command line mode.

:cu[nmap] lhs - remove the mapping of lhs from command line mode.
:nun[map] lhs - remove the mapping of lhs from normal mode.
:vu[nmap] lhs - remove the mapping of lhs from visual mode.

Ranges~
                                                               *Vifm_Ranges*
The ranges implemented include:
  Numbers :2,3
  % - the entire directory.
  . - the current position in the filelist.
  $ - the end of the filelist.
  't - the mark position t.

  :%delete would delete all files in the directory.
  :2,4delete would delete the files in the list positions 2 through 4.
  :.,$delete would delete the files from the current position to the end
    of the filelist.
  :3delete4 would delete the files in the list positions 3, 4, 5, 6.

If a backward range is given :4,2delete - an query message is given and
user can chose what to do next.

The builtin commands that accept a range are :d[elete] and :y[ank].

Command macros~

The command macros may be used in user commands.
  %a user arguments.
  %c the current file under the cursor.
  %C the current file under the cursor in the other directory.
  %f all of the selected files.
  %F all of the selected files in the other directory list.
  %b same as %f %F.
  %d full path to current directory.
  %D full path to other file list directory.
  %m show command output in a menu.
  %M same as %m, but l (or Enter) key is handled like for :locate and :find
     commands.
  %s execute command in screen split.

Use %% if you need to put a percent sign in your command.

You can use filename modifiers after %c, %C, %f, %F, %b, %d and %D macros.
Supported modifiers are:
    :p           - full path
    :~           - relative to the home directory
    :.           - relative to current directory
    :h           - head of the filename
    :t           - tail of the filename
    :r           - root of the filename (without last extension)
    :e           - extension of the filename (last one)
    :s?pat?sub?  - substitute the first occurrence of "pat" with "sub".  You
                   can use any character for '?', but it must not occur in.
    :gs?pat?sub? - like :s, but substitutes all occurrences of "pat" with
                   "sub".
See ':h filename-modifiers' in Vim's documentation for the detailed
description.

Position and quantity (if there is any) of %m and %s macros in the
command is unimportant.  All their occurrences will be removed from the
resulting command.

%c and %f macros are expanded to file names only, when %C and %F are expanded
to full paths.  %f and %F follow this in %b too.

:com move mv %f %D - would set the :move command to move all of the files
selected in the current directory to the other directory.

The %a macro will substitute any arguments given in a command into the
command.  All arguments are considered optional.
:com lsl !!ls -l %a - will set the lsl command to execute ls -l with or
without an argument.

:lsl<Return> will list the directory contents of the current directory.
:lsl filename<Return> will list only the given filename.

The macros can also be used in directly executing commands.
:!mv %f %D - would move the current directory selected files to the other
directory.

Appending & to the end of a command will cause it to be executed in the
background.

:!mv %f %D &

--------------------------------------------------------------------------------
*set-options*

autochpos
type: boolean
default: true
When disabled vifm will set cursor to the first line in the view after :cd and
:pushd commands instead of saved cursor position.  Disabling this will also
make vifm clear information about cursor position in the view history on :cd
and :pushd commands (and on startup if autochpos is disabled in the vifmrc).
l key in the :history . menu is treated like :cd command.

confirm cf
type: boolean
default: true
Ask about permanent deletion of files (on D command or on undo/redo operation).

fastrun
type: boolean
default: false
With this option turned on you can run partially entered commands with
unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

followlinks
type: boolean
default: true
Follow links on l or Enter.

fusehome
type: string
default: "/tmp/vifm_FUSE/"
Directory to be used as a root dir for FUSE mounts.
If you change this option, vifm won't remount anything.  It affects future
mounts only.

history hi
type: integer
default: 15
Maximum number of directories in the view history.

hlsearch hls
type: bool
default: true
Highlight all matches of search pattern.

iec
type: boolean
default: false
Use KiB, MiB, ... instead of KB, MB, ...

ignorecase ic
type: boolean
default: false
Ignore case in search patterns (:substiute, / and ? commands).  It doesn't
affect file filtering.

reverscol
type: boolean
default: false
Reverse colors of the line under the cursor.

runexec
type: boolean
default: false
Run executable file on Enter or l.

shell sh
type: string
default: $SHELL or "sh"
Full path to the shell to use to run external commands.

smartcase scs
type: boolean
default: false
Overrides the ignorecase option if the search pattern contains at least one
upper case character.  Only used when ignorecase option is enabled.  It doesn't
affect file filtering.

sort
type: enumeration
default: name
Sets one of these sort types:
   ext   - sort by extension
   name  - sort by name
   gid   - sort by group id
   gname - sort by group name
   mode  - sort by mode
   uid   - sort by owner id
   uname - sort by owner name
   size  - sort by size
   atime - sort by time accessed
   ctime - sort by time changed
   mtime - sort by time modified

sortnumbers
type: boolean
default: false
Natural sort of (version) numbers within text.

sortorder
type: enumeration
default: ascending
Sets sort order: ascending, descending.

timefmt
type: string
default: " %m/%d %H:%M"
Format of time in file list.  See man date or man strftime for details.

trash
type: boolean
default: true
Use trash directory.

timeoutlen tm
type: integer
default: 1000
The time in milliseconds that is waited for a mapped key in case of already
typed key sequence is ambiguous.

undolevels ul
type: integer
default: 100
Maximum number of changes that can be undone.

vicmd
type: string
default: "vim"
The actual command used to start vi.  Ampersand sign at the end (regardless
whether it's preceded by space or not) means backgrounding of command.

vixcmd
type: string
default: value of vicmd
The command used to start vi when in X.  Ampersand sign at the end (regardless
whether it's preceded by space or not) means backgrounding of command.

vifminfo
type: set
default: bookmarks
Controls what will be saved in the ~/.vifm/vifminfo file.
   options   - all options that can be set with the :set command
   filetypes - associated programs and viewers
   commands  - user defined commands (see :command description)
   bookmarks - bookmarks, except special ones like '< and '>
   tui       - state of the user interface (sorting, number of windows, quick
               view state, active view)
   dhistory  - directory history
   state     - filters and screen program using state
   cs        - default color scheme
   savedirs  - save last visited directory (needs dhistory)
   chistory  - command line history
   shistory  - search history (/ and ? commands)
   dirstack  - directory stack
   registers - registers content
   phistory  - prompt history

vimhelp
type: boolean
default: false
Use vim help format.

wildmenu wmnu
type: boolean
default: false
Controls whether possible matches of completion will be shown above the
command line.

wrap
type: boolean
default: true
Controls whether to wrap text in quick view.

--------------------------------------------------------------------------------
*Mappings*

Since it's not easy to enter special characters there are several special
sequences that can be used in place of them.  They are:

<cr> - Enter key
<c-a>,<c-b>,...,<c-z>,<c-[>,<c-\>,<c-]>,<c-^>,<c-_> - Control + some key.
<space> - Space key
<f0> - <f63> - functional keys

vifm removes whitespace characters at the beginning and end of commands.
That's why you may want to use <space> at the end of rhs in mappings.  For
example: >
 cmap <f1> man<space>
will put "man " in line when you hit the <f1> key in the command line mode.

--------------------------------------------------------------------------------
*Compatibility_mode*

Compatibility mode:
    - <tab> to switch between panes.
    - dd deletes selected (or current if none) files.
    - yy yanks selected (or current if none) files.

Vim like mode:
    - <c-i> (<tab>) to go forward on history.
    - dd deletes file under the cursor and ds works as dd in compatibility mode.
    - yy yanks file under the cursor and ys works as dd in compatibility mode.

--------------------------------------------------------------------------------
*Menus_and_dialogs*

General~

j, k - move.
<Escape>, Ctrl-c - clear.
<Return>, l - select and exit the menu.
Ctrl-l - redraw the menu.

In all menus~

Ctrl-b/Ctrl-f
Ctrl-d/Ctrl-u
Ctrl-e/Ctrl-y
/ and ?, n/N
[num]G/[num]gg
H/M/L
zb/zt/zz

All these keys have the same meaning as in normal mode (but not L in filetype
menu).

: - enter command line mode for menus (currently only :exi[t], :q[uit], :x[it]
and :range are supported).

Apropos menu~

l key wont close the menu allowing user to pick another man page, use :q to
close the menu.

Commands menu~

dd on a command to remove.

Bookmarks menu~

Escape or Ctrl-c to abort j and k to move through.
dd on a bookmark to remove.

Directory stack menu~

Pressing l or Enter on directory name will rotate stack to place selected
directory pair at the top of the stack.

Filetype menu~

Commands from vifmrc are displayed above empty line. When all commands below
empty line were found in .desktop files.

J and K - to move menu items
L - save all commands above empty line as program list

Fileinfo dialog~

Enter - close dialog
q - close dialog

Sort dialog ~

h - switch ascending/descending.
Space - switch ascending/descending.
q - close dialog

Permissions dialog~

h - check/uncheck.
Space - check/uncheck.
q - close dialog

Item states:
* - checked flag.
X - means that it has different value for files in selection.
d - (only for execute flags) means u-x+X, g-x+X or o-x+X argument for the
    chmod program.  If you want to remove execute right from all files, but
    preserve it for directories, set all execute flags to 'd' and check
    'Set Recursively' flag.

--------------------------------------------------------------------------------
*Configure*

The ~/.vifm/vifmrc file contains commands that will be executed on vifm startup.
Use it to set settings, mappings or filetypes.  To use multi line commands
precede each next line with a slash (whitespace before slash is ignored, but all
spaces at the end of the lines are saved).  For example:
set
    \smartcase
equals "setsmartcase".  When
set<space here>
    \ smartcase<space here>
equals "set  smartcase ".

The ~/.vifm/vifminfo file contains session settings.  You may edit it by hand
to change the settings, but it's not recommended to do that, edit vifmrc
instead.  You can control what settings will be saved in vifminfo by setting
'vifminfo' option.  Vifm always writes this file on exit unless 'vifminfo'
option is empty.  Bookmarks, commands, directory history, filetypes, fileviewers
and registers in the file are merged with vifm configuration (which has bigger
priority).

The ~/.vifm/scripts directory can contain shell scripts.  vifm modifies
it's PATH environment variable to let user run those scripts without specifying
full path.

--------------------------------------------------------------------------------
*Plugin*

Plugin for using vifm in vim as a file selector.

Commands:

  :EditVifm   select a file or files to open in the current buffer.
  :SplitVifm  split buffer and select a file or files to open.
  :VsplitVifm vertically split buffer and select a file or files to open.
  :DiffVifm   select a file or files to compare to the current file with
              :vert diffsplit.
  :TabVifm    select a file or files to open in tabs.

The plugin have only one setting.  It's a string variable named g:vifm_term to
let user specify command to run gui terminal.  By default it's equal to
'xterm -e'.

To use the plugin copy the vifm.vim file to either the system wide vim/plugin
directory or into ~/.vim/plugin.

If you would prefer not to use the plugin and it is in the system wide plugin
directory add

let loaded_vifm=1

to your ~/.vimrc file.

--------------------------------------------------------------------------------
*Reserved*

The following command names are reserved and shouldn't be used for user
commands.

  chmod
  chown
  g[lobal]
  mkdir
  touch
  v[global]

--------------------------------------------------------------------------------
 vim:tw=78:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:ft=help:norl:
