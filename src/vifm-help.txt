The basic vi key bindings are used to move through the files and popup
	windows.

    k is up
    j is down

	h is updir
	l is handle file and is the same as Return.

	Ctrl-c or the Escape key will cancel most operations.
	Ctrl-l will clear and redraw the screen.

	gg top of list.
	ga calculate size of directory.
    gA like ga, but force update.
    gv go to visual mode restoring last selection.
	G bottom of list
    H move to the first file in the window.
    M move to the file in the middle of the window.
    L move to the last file in the window.
	cg change group of file.
	co change owner of file.
    cp change file permissions.
	cw change word is used to rename a file.
    cW change WORD is used to change only name of file (without extension).
    C clone file.
	m [a-z][A-Z][0-9] to set bookmark
	' letter to goto bookmark
	v or V start or stop visualy selecting files.  This works with the j and k keys
		for movement.  This is different then in vi in that v in visual mode will
		leave the selected files highlighted.  If you want to clear the selected
		files Ctrl-c or Esc will unselect the files.  You can use o or O keys to
        switch active selection bound.
	dd - the default setting is to move the selected files to the trash
		directory.
    DD - delete file omitting trash directory.
	yy - will yank the selected files.
	p - will copy the yanked files to the current directory or move the files
		to the current directory if they were deleted with dd or :d or if the
		files were yanked 'yy' from the Trash directory.
    P - will move yanked files.
    ZQ - same as :q<Return>
    ZZ - same as :wq<Return>
    zt - redraw pane with file in top of list.
    zz - redraw pane with file in center of list.
    zb - redraw pane with file in bottom of list.
    . - repeat last command line command (not normal mode command).

	Space or Tab to switch lists.

	Most movement commands also accept a count  12j would move down 12 lines.
	[count] % percent of file list
	[count] j or k
	[count] G or gg
	[count] dd or yy the count is from the current file downward.
	:[count] user command is not yet implemented.
	:[count] command
		 The only builtin :[count] command is :[count]d[elete].  :d3 would delete
		 three files starting at the current file position moving down.  And :3d
         would delete files at the third line.

    :number - move to the line number :12  would move to the 12th file in the list.
		:0 move to the top of the list.
		:$ move to the bottom of the list.

    j, k, gg, G, H, L, M can be used as selectors for several commands.
    Also following selectors can be used:
     a - all files in current view
     s - selected files
     S - all files except selected
    For example:
    dj delete file under cursor and one below.
    d2j delete file under cursor and two below.
    y6gg yank all files from cursor position to 6th file in the list.

	Return or l -  handle file (can run executables)
    i - handle file always
		Default file type program or if on a directory enter the directory

	Ctrl-g toggles full file information window.
	Ctrl-b - jump back one page.
	Ctrl-f - jump forward one page.
	Ctrl-d - jump back one half page.
	Ctrl-u - jump forward one half page.
	Ctrl-e - scroll pane one line down.
	Ctrl-y - scroll pane one line up.
    Ctrl-w h - switch to the left pane.
    Ctrl-w l - switch to the right pane.
    Ctrl-w o - shortcut for :only
    Ctrl-w v - shortcut for :split
    Ctrl-w w - switch to other pane.
    Ctrl-w x - exchange panes.

    f, F, ;, <comma> - search by first character in filename.

	/regular expression pattern - will highlight all files matching the pattern
	in the current file list. /\.c$ would highlight all the .c files.
		N find previous match.
		n find next match.

	Files can also be tagged or selected with 't'.  Pressing 't' on a selected
	file will unselect it.  This can be used by itself to select files or with a
	/search pattern  or with visually selected files.

	:com[mand]
	:com[mand] is a menu of user commands
	:com[mand] name action - will set a new user command
		Unlike vim user commands do not have to start with a capital letter.
		User commands are run in a shell by default.  To run a command in
		the background you must set it as a background command with & at the end
		of the commands action.
		:com rm rm %f &

	:apropos manpage - will create a menu with the results from the
		apropos command.
	:com[mand]! name action - will overwrite a previously set command.
	:delcommand command_name - will remove the command_name user command.
    :display or :register - popup menu with registers content.
    :dirs - display directory stack.
    :cmdhistory - show command line history menu.
    :colo[rscheme] - gives a menu with a list of available color schemes.  You
        can choose default color scheme here.  It will be used if no DIRECTORY in
        colorscheme file doesn't fit current path.
    :colo[rscheme] color_scheme_name - changes default color scheme.  See
        :colo[rscheme].
	:file - popup menu of programs set for the file type of the current file.
        Add ' &' in the end of command if you want to start program in background. 
	:filter regular_expression pattern will filter the files out of the directory
		listing that match the regular expression.
		:filter \.o$ - would filter all files ending in .o from the filelist.
		:filter - would filter no files from the filelist.
	:empty will permanently remove 'rm -fr' files from the Trash directory.
	:locate filename - will create a menu with the results from the locate
		command.
	:q or :x will exit vifm (add ! if you don't want to save changes).
    :w same as :write
    :wq will exit vifm after writing config.
    :write will write config (add ! to force even if settings weren't changed)
	:! program will execute the program in a shell
		:!command &   will run the process in the background.
			programs that write to stdout like ls will create an error message
			showing partial output of the command.
	:!!  same as :! but will pause the screen before returning to vifm.
		:!!ls -l
	:edit [file...] - load file(s) into vi.
	:only - switch to a one window view.
	:pwd - show the present working directory.
	:change - create a menu window to alter a files properties.
	:cd - change directory.
		:cd ~/bin
    :popd - remove pane directories from stack.
    :pushd directory - add pane directories to stack.
    :screen] toggles whether to use the screen program or not.
    :set opt1=val1 opt2=val2 - sets given options.
    :shell will start a shell
	:sort - popup menu of different sorting methods
	:split - switch to a two window view.
	:history - popup menu of directories visited
	:jobs - shows menu of current backgrounded processes.
	:undolist - show list of latest changes. Add ! to see commands.
	:view - toggle on and off the quick file view.
	:help - this crude help file
	:marks - popup menu of bookmarks
    :rename - rename files using vi to edit names.
	:sync - change the other panel to the current panel directory.


command macros
	%a user arguments.
    %c the current file under the cursor.
    %C the current file under the cursor in the other directory.
	%f all of the selected files.
	%F all of the selected files in the other directory list.
    %b same as %f %F.
	%d current directory name.
	%D other file list directory name.
    %m show command output in a menu.
    %s execute command in screen split.
	:com mv mv %f %D
		would set the mv command to mv all of the selected files to the other
		directory.

		If you want a command to accept arguments you must use %a.
		:com mkdir mkdir %a &
		:com mygrep vim "+grep %a"
		%a is simply replaced with the user arguments and the arguments are
		considered to be optional.
		:com lsl ls -l %a | less  - would run ls -l | less with or without
		an argument being given.

search patterns can be set with :com name /pattern
	:com backup /~$


	file filters
	The basic vim folding key bindings are used for filtering files.
	zO show the filtered files
	zM Filter the files matching the filename filter.
	zo show all the dot files
    za toggle dot files visibility
	zm filter all the .dot files
	zf filter all the selected files
		This will work with all selecting methods.  Visually selecting files,
		using a / search pattern or in combination with 't'.
	:fil[ter] regular expression
	:in[vert] invert the filter
	All directorys will show the ../ file no matter what the filter setting is
	with the exception of the / directory.
	Each file list has its own filter.
	filtered files are not checked in / search or :commands

	file name filters can be set with
        :com name fil pattern
	    :com ofiles fil \.o$

    Note: vifm uses extended regular expressions.

Mappings

    Since it's not easy to enter special characters there are several special
    sequences that can be used in place of them. They are:

    <cr> - Enter key
    <space> - Space key
    <f0> - <f63> - functional keys

Configuration.

	The default configuration file is ~/.vifm/vifmrc.
	If you want to change any settings vifm must not be running when you edit
	the file as it will overwrite any changes you make when it exits.

    The ~/.vifm/startup file contains commands that will be executed on vifm
    startup. You can set your mappings there.

	Screen configuration.  If you use the screen program, vifm can be configured
	to use a new screen window for opening files or running :!programs.

Misc.
	Ctrl-c or Escape to clear all selected files

	vifm.vim is a vim plugin that allows the use of vifm from vim.  It is
	included in the source tarball but it is not installed by default and must
	be manually placed in either the default vim/plugin directory or in
	~/.vim/plugin/
	To use vifm to load a file into a running vim use the following commands:
		:Edit - open a file in the current buffer.
		:Split - split the buffer and open a file.
		:Vsplit - vertically split a buffer and open a file.
		:Diff - open a file to compare to the current file using the vim :diff
			command.
	You can edit the vifm.vim script to change the command name used if they
	conflict with other user commands.

	Starting options:
		/full/path/to/directoryone - using vifm /usr/local will start vifm
			with the /usr/local directory.  The default is to start vifm in
			the current directory.
		/full/path/to/directorytwo - using two full paths will start vifm with
			the first path in the left file list and the second path in the right
			file list.
		--version - will print the version number and exit.
		--help - will show help file.
		-f - will run vifm but selecting a file will write the file name to
			~/.vifm/vimfiles instead of opening the file.  This is used for the
			vifm.vim script to load files from vifm into a running vim.

Menus and dialogs
    general:
        j and k to move
        Escape or Ctrl-c to clear
        return or l to select and exit the menu

	bookmarks:
        escape or Ctrl-c to abort j and k to move through
		dd on a bookmark to remove.

	sort dialog:
        h to switch ascending/descending

    filetype:
        Commands from vifmrc are displayed above empty line. When all commands
        below empty line were found in .desktop files.
        Note: you can't save programs for files without extension.

        J and K - to move menu items
        L - save all commands above empty line as program list

Options
    fastrun
    type: boolean
    default: false
    With this option turned on you can run partially entered commands with
    unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

    followlinks
    type: boolean
    default: true
    Follow links on l or Enter.

    iec
    type: boolean
    default: false
    Use KiB, MiB, ... instead of KB, MB, ...

    runexec
    type: boolean
    default: false
    Run executable file on Enter or l

    savelocation
    type: boolean
    default: false
    Start vifm in the last visited directory.

    sort
    type: enumeration
    default: name
    Sets one of these sort types:
       ext   - sort by extension
       name  - sort by name
       gid   - sort by group id
       gname - sort by group name
       mode  - sort by mode
       uid   - sort by owner id
       uname - sort by owner name
       size  - sort by size
       atime - sort by time accessed
       ctime - sort by time changed
       mtime - sort by time modified

    sortnumbers
    type: boolean
    default: false
    Natural sort of (version) numbers within text.

    sortorder
    type: enumeration
    default: ascending
    Sets sort order: ascending, descending.

    trash
    type: boolean
    default: true
    Use trash directory.

    undolevels
    type: integer
    default: 100
    Maximum number of changes that can be undone.

    vicmd
    type: string
    default: "vim"
    The actual command used to start vi.

    vimhelp
    type: boolean
    default: false
    Use vim help format.

    wrap
    type: boolean
    default: true
    Controls whether to wrap text in quick view.

Reserved :commands
	!
	apropos
	cd
	change
	cmap
	colo
	colorscheme
    com
	command
	cmdhistory
	delcommand
	delete
	dirs
	display
	edit
	empty
	file
	filter
	help
	history
	invert
	jobs
	locate
	ls
	map
	marks
	nmap
	noh
	nohlsearch
	only
	popd
	pushd
	pwd
    q
	quit
	register
	rename
	screen
	set
	shell
	sort
    sp
	split
	sync
	undolist
	unmap
	view
	vifm
	vmap
	w
	wq
	write
	x
	yank
